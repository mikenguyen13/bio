<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HPC | Mike Nguyen</title>
    <link>https://mikenguyen.netlify.app/tag/hpc/</link>
      <atom:link href="https://mikenguyen.netlify.app/tag/hpc/index.xml" rel="self" type="application/rss+xml" />
    <description>HPC</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© Mike Nguyen 2024</copyright><lastBuildDate>Mon, 30 Nov 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://mikenguyen.netlify.app/media/social_sharing_image.png</url>
      <title>HPC</title>
      <link>https://mikenguyen.netlify.app/tag/hpc/</link>
    </image>
    
    <item>
      <title>doParallel</title>
      <link>https://mikenguyen.netlify.app/post/doparallel/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/doparallel/</guid>
      <description>
&lt;link href=&#34;index_files/anchor-sections/anchor-sections.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;index_files/anchor-sections/anchor-sections.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;packages&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Packages&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#install.packages(&amp;quot;doParallel&amp;quot;)
library(&amp;quot;doParallel&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: foreach&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: iterators&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: parallel&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check how long a loop takes&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;start &amp;lt;- proc.time()
for (i in 1:10){
    sqrt(i)
}
base_loop=(proc.time()-start)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check number of cores&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;doParallel&amp;quot;)
detectCores()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;getDoParWorkers() #current number of worker&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;registerDoSEQ() #switch back to original
getDoParWorkers()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let R know how many cores you want to use&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;registerDoParallel(6)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You shouldn’t use all the cores since your computer might want some background programs to run.&lt;/p&gt;
&lt;p&gt;We can also create cluster of workers&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cluster = makeCluster(2)
registerDoParallel(cluster)
system.time(foreach(i=1:100) %dopar% sum((1:i)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.03    0.00    0.04&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopCluster(cluster)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compare different loops&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%do%&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;start &amp;lt;- proc.time()
foreach(i=1:10) %do% {
    sqrt(i)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 1
## 
## [[2]]
## [1] 1.414214
## 
## [[3]]
## [1] 1.732051
## 
## [[4]]
## [1] 2
## 
## [[5]]
## [1] 2.236068
## 
## [[6]]
## [1] 2.44949
## 
## [[7]]
## [1] 2.645751
## 
## [[8]]
## [1] 2.828427
## 
## [[9]]
## [1] 3
## 
## [[10]]
## [1] 3.162278&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;do_loop=(proc.time()-start)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;%dopar%&lt;/code&gt; loop&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cl &amp;lt;- makeCluster(2)
registerDoParallel(cl)
start &amp;lt;- proc.time()
foreach(i = 1:10, .combine = &amp;#39;c&amp;#39;) %dopar% {
  sqrt(i)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427
##  [9] 3.000000 3.162278&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dopar_loop=(proc.time()-start)
stopCluster(cl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(rbind(base_loop,do_loop,dopar_loop)[,1:3])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            user.self sys.self elapsed
## base_loop       0.01        0    0.02
## do_loop         0.02        0    0.01
## dopar_loop      0.02        0    0.04&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;%do%&lt;/code&gt; does not use more than base core, but &lt;code&gt;%dopar%&lt;/code&gt; uses the number of cores that we specify in &lt;code&gt;registerDoParallel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;doParallel::mclapply&lt;/code&gt; is the equivalent of &lt;code&gt;lapply&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
