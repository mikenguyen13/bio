<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R Markdown | Mike Nguyen</title>
    <link>https://mikenguyen.netlify.app/tag/r-markdown/</link>
      <atom:link href="https://mikenguyen.netlify.app/tag/r-markdown/index.xml" rel="self" type="application/rss+xml" />
    <description>R Markdown</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© Mike Nguyen 2024</copyright><lastBuildDate>Wed, 24 Nov 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://mikenguyen.netlify.app/media/social_sharing_image.png</url>
      <title>R Markdown</title>
      <link>https://mikenguyen.netlify.app/tag/r-markdown/</link>
    </image>
    
    <item>
      <title>refer to relative path in blogdown</title>
      <link>https://mikenguyen.netlify.app/post/refer-to-relative-path-in-blogdown/</link>
      <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/refer-to-relative-path-in-blogdown/</guid>
      <description>
&lt;script src=&#34;https://mikenguyen.netlify.app/post/refer-to-relative-path-in-blogdown/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;When you write your posts/blogs on blogdown, you might not want to always refer to the absolute path appeared on your website (because you might change your domain name and all hell breaks loose).&lt;/p&gt;
&lt;p&gt;Then, to specify relative path you can&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1: Change your &lt;code&gt;config.toml&lt;/code&gt; file by searching for &lt;code&gt;[permalinks]&lt;/code&gt; then include relative path for your post:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;[permalinks] 
    authors = &amp;quot;/author/:slug/&amp;quot; 
    tags = &amp;quot;/tag/:slug/&amp;quot; 
    categories = &amp;quot;/category/:slug/&amp;quot; 
    publication_types = &amp;quot;/publication-type/:slug/&amp;quot; 
    post = &amp;quot;/post/:slug&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Step 2: Then you can start writing like usual again. For example, you can find the last post &lt;code&gt;[here](/post/slug_name_for_other_post/)&lt;/code&gt; where &lt;code&gt;here&lt;/code&gt; will be highlighted with the URL to the other post.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>making your image and figure robust in bs4 bookdown</title>
      <link>https://mikenguyen.netlify.app/post/image-and-figure-robust-in-bs4-bookdown/</link>
      <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/image-and-figure-robust-in-bs4-bookdown/</guid>
      <description>
&lt;script src=&#34;https://mikenguyen.netlify.app/post/image-and-figure-robust-in-bs4-bookdown/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I struggle to find how to make my figures and images perfectly aligned in the center of my book. After looking around, I think I’ve found an adequate solution:&lt;/p&gt;
&lt;p&gt;Step 1: Change your image into &lt;code&gt;%&lt;/code&gt; format.&lt;/p&gt;
&lt;p&gt;Step 2: I typically change my width to &lt;code&gt;100&lt;/code&gt;, but you can also leave it as is&lt;/p&gt;
&lt;p&gt;Step 3: Go to &lt;code&gt;Attributes&lt;/code&gt; tab can put this line into the “CSS styles” box: &lt;code&gt;display: block; margin: 1em auto&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Voila! Now your image or figure should be robust to both bs4 or gitbook styles.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bookdown Statistics</title>
      <link>https://mikenguyen.netlify.app/post/bookdown-statistics/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/bookdown-statistics/</guid>
      <description>
&lt;script src=&#34;https://mikenguyen.netlify.app/post/bookdown-statistics/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;It’s possible to have basic statistics from bookdown using &lt;code&gt;connectapi&lt;/code&gt; (&lt;a href=&#34;https://github.com/sol-eng/connect-usage&#34;&gt;basic example&lt;/a&gt;). However, this feature is very limited.&lt;/p&gt;
&lt;p&gt;Hence, it is better to &lt;a href=&#34;(%7B%7B%3C%20relref%20%22../2021-08-14-how-to-connect-bookdown-with-google-analytics%22%20%3E%7D%7D)&#34;&gt;connect bookdown to Google Analytics&lt;/a&gt; to have better metrics. However, the trade-off is that you can’t see every book’s performance at once even though they are all under one account, since it is in one property. You could use Roll-up report, but then you will have to pay to use that feature.&lt;/p&gt;
&lt;p&gt;Another solution is to use Google Analytics API and write your R script to see customized performance of all your books.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>psychological experiments</title>
      <link>https://mikenguyen.netlify.app/post/psychological-experiments/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/psychological-experiments/</guid>
      <description>
&lt;link href=&#34;https://mikenguyen.netlify.app/rmarkdown-libs/anchor-sections/anchor-sections.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://mikenguyen.netlify.app/rmarkdown-libs/anchor-sections/anchor-sections.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Use &lt;code&gt;jaysire&lt;/code&gt; package to build flexible behavioral experiments in R. Why?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Better workflow&lt;/li&gt;
&lt;li&gt;Free&lt;/li&gt;
&lt;li&gt;Cutomizable&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;remotes::install_github(&amp;quot;djnavarro/jaysire&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>doParallel</title>
      <link>https://mikenguyen.netlify.app/post/doparallel/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/doparallel/</guid>
      <description>
&lt;link href=&#34;index_files/anchor-sections/anchor-sections.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;index_files/anchor-sections/anchor-sections.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;packages&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Packages&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#install.packages(&amp;quot;doParallel&amp;quot;)
library(&amp;quot;doParallel&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: foreach&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: iterators&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: parallel&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check how long a loop takes&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;start &amp;lt;- proc.time()
for (i in 1:10){
    sqrt(i)
}
base_loop=(proc.time()-start)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check number of cores&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;doParallel&amp;quot;)
detectCores()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;getDoParWorkers() #current number of worker&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;registerDoSEQ() #switch back to original
getDoParWorkers()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let R know how many cores you want to use&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;registerDoParallel(6)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You shouldn’t use all the cores since your computer might want some background programs to run.&lt;/p&gt;
&lt;p&gt;We can also create cluster of workers&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cluster = makeCluster(2)
registerDoParallel(cluster)
system.time(foreach(i=1:100) %dopar% sum((1:i)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.03    0.00    0.04&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopCluster(cluster)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compare different loops&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%do%&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;start &amp;lt;- proc.time()
foreach(i=1:10) %do% {
    sqrt(i)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 1
## 
## [[2]]
## [1] 1.414214
## 
## [[3]]
## [1] 1.732051
## 
## [[4]]
## [1] 2
## 
## [[5]]
## [1] 2.236068
## 
## [[6]]
## [1] 2.44949
## 
## [[7]]
## [1] 2.645751
## 
## [[8]]
## [1] 2.828427
## 
## [[9]]
## [1] 3
## 
## [[10]]
## [1] 3.162278&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;do_loop=(proc.time()-start)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;%dopar%&lt;/code&gt; loop&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cl &amp;lt;- makeCluster(2)
registerDoParallel(cl)
start &amp;lt;- proc.time()
foreach(i = 1:10, .combine = &amp;#39;c&amp;#39;) %dopar% {
  sqrt(i)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427
##  [9] 3.000000 3.162278&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dopar_loop=(proc.time()-start)
stopCluster(cl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(rbind(base_loop,do_loop,dopar_loop)[,1:3])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            user.self sys.self elapsed
## base_loop       0.01        0    0.02
## do_loop         0.02        0    0.01
## dopar_loop      0.02        0    0.04&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;%do%&lt;/code&gt; does not use more than base core, but &lt;code&gt;%dopar%&lt;/code&gt; uses the number of cores that we specify in &lt;code&gt;registerDoParallel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;doParallel::mclapply&lt;/code&gt; is the equivalent of &lt;code&gt;lapply&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>https://mikenguyen.netlify.app/post/hello-r-markdown/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://mikenguyen.netlify.app/post/hello-r-markdown/</guid>
      <description>
&lt;link href=&#34;index_files/anchor-sections/anchor-sections.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;index_files/anchor-sections/anchor-sections.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;include Shiny App&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::include_app(&amp;quot;https://mikenguyen.shinyapps.io/first-app/&amp;quot;, height = &amp;quot;100%&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&#34;https://mikenguyen.shinyapps.io/first-app/?showcase=0&#34; width=&#34;672&#34; height=&#34;100%&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Or you can embed directly as iframe.&lt;br /&gt;
But remember to include &lt;code&gt;runtime: shiny&lt;/code&gt; in the YAML metadata&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;iframe height=&amp;quot;800&amp;quot; width=&amp;quot;100%&amp;quot; title=&amp;quot;first app&amp;quot; name=&amp;quot;first app&amp;quot; allowfullscreen=&amp;quot;true&amp;quot; loading=&amp;quot;eager&amp;quot; scrolling=&amp;quot;auto&amp;quot;  style=&amp;quot;border:none;&amp;quot; src=&amp;quot;https://mikenguyen.shinyapps.io/first-app/&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;iframe height=&#34;800&#34; width=&#34;100%&#34; title=&#34;first app&#34; name=&#34;first app&#34; allowfullscreen=&#34;true&#34; loading=&#34;eager&#34; scrolling=&#34;auto&#34; style=&#34;border:none;&#34; src=&#34;https://mikenguyen.shinyapps.io/first-app/&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(c(280, 60, 20), c(&amp;quot;Sky&amp;quot;, &amp;quot;Sunny side of pyramid&amp;quot;, &amp;quot;Shady side of pyramid&amp;quot;), col = c(&amp;quot;#0292D8&amp;quot;, 
    &amp;quot;#F7EA39&amp;quot;, &amp;quot;#C4B632&amp;quot;), init.angle = -50, border = NA)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;index_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
